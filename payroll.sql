--Creation of the tables
CREATE TABLE employees (
    employee_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name       VARCHAR2(50),
    last_name        VARCHAR2(50),
    department       VARCHAR2(50),
    position         VARCHAR2(50),
    hire_date        DATE,
    base_salary      NUMBER(10, 2)
);

CREATE TABLE attendance (
    attendance_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id      NUMBER,
    work_date        DATE,
    hours_worked     NUMBER(4,2),
    is_absent        CHAR(1) CHECK (is_absent IN ('Y', 'N')),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

CREATE TABLE payroll_history (
    payroll_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id      NUMBER,
    payroll_month    VARCHAR2(10),
    gross_salary     NUMBER(10, 2),
    total_deductions NUMBER(10, 2),
    net_salary       NUMBER(10, 2),
    processed_date   DATE DEFAULT SYSDATE,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

CREATE TABLE leave_requests (
    request_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id     NUMBER NOT NULL,
    start_date      DATE NOT NULL,
    end_date        DATE NOT NULL,
    reason          VARCHAR2(200),
    status          VARCHAR2(10) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED')),
    requested_on    DATE DEFAULT SYSDATE,
    approved_by     NUMBER,
    approved_on     DATE,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);
--Inserting the data into tables
INSERT INTO employees (first_name, last_name, department, position, hire_date, base_salary)
VALUES ('Alice', 'Smith', 'IT', 'Developer', TO_DATE('2024-06-01', 'YYYY-MM-DD'), 5000);

INSERT INTO employees (first_name, last_name, department, position, hire_date, base_salary)
VALUES ('Bob', 'Jones', 'HR', 'Analyst', TO_DATE('2024-03-15', 'YYYY-MM-DD'), 4500);

INSERT INTO attendance (employee_id, work_date, hours_worked, is_absent)
VALUES (4, TO_DATE ('2025-06-01', 'YYYY-MM-DD'), 8, 'N');

INSERT INTO attendance (employee_id, work_date, hours_worked, is_absent)
VALUES (5, TO_DATE ('2025-06-02', 'YYYY-MM-DD'), 0, 'Y');

CREATE OR REPLACE PROCEDURE process_payroll(p_employee_id in NUMBER, p_month in VARCHAR2) AS
    v_base_salary NUMBER;
    v_hours_worked NUMBER := 0;
    v_deduction_rate NUMBER := 20;
    v_gross NUMBER;
    v_deductions_hours NUMBER;
    v_deductions_leave NUMBER := 0;
    v_net NUMBER;
    v_daily_salary     NUMBER;
    v_unapproved_days  NUMBER := 0;

BEGIN
    SELECT base_salary INTO v_base_salary
    FROM employees
    WHERE employee_id = p_employee_id;

    SELECT NVL(SUM(hours_worked), 0)
    INTO v_hours_worked
    FROM attendance
    WHERE employee_id = p_employee_id AND TO_CHAR(work_date, 'YYYY-MM') = p_month;

    v_deductions_hours := ((160 - v_hours_worked) / 160) * v_base_salary;


    SELECT COALESCE(SUM(end_date - start_date + 1), 0)
    INTO v_unapproved_days
    FROM leave_requests
    WHERE employee_id = p_employee_id AND status = 'REJECTED' AND TO_CHAR(start_date, 'YYYY-MM') = p_month;

    v_daily_salary := v_base_salary / 30;
    v_deductions_leave := v_daily_salary * v_unapproved_days;

    v_gross := v_base_salary;

    v_net := v_gross - (v_deductions_hours + v_deductions_leave);


    INSERT INTO payroll_history (employee_id, payroll_month, gross_salary, total_deductions, net_salary)
    VALUES (p_employee_id, p_month, v_gross, v_deductions_hours + v_deductions_leave, v_net);

    DBMS_OUTPUT.PUT_LINE('Payroll processed for Employee ' || p_employee_id || ' | Hours Deducted: ' || v_deductions_hours || ' | Leave Deducted: ' || v_deductions_leave || ' | Net Salary: ' || v_net);

EXCEPTION
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE('Employee not found.');
    WHEN OTHERS THEN    
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);

END;
/

CREATE OR REPLACE PROCEDURE request_leave(p_employee_id in NUMBER, p_start_date in DATE, p_end_date in DATE, p_reason in VARCHAR2) AS 
    
BEGIN
    IF p_start_date > p_end_date THEN
        RAISE_APPLICATION_ERROR(-20001, 'Start date cannot be after end date.');
    END IF;

    INSERT INTO leave_requests (employee_id, start_date, end_date, reason)
    VALUES (p_employee_id, p_start_date, p_end_date, p_reason);

    DBMS_OUTPUT.PUT_LINE('Leave request submitted successfully.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error while submitting leave request: ' || SQLERRM);

END;
/

CREATE OR REPLACE PROCEDURE approve_leave(p_request_id in NUMBER, p_manager_id in NUMBER, p_action in VARCHAR2) AS


BEGIN
    IF UPPER(p_action) NOT IN ('APPROVE', 'REJECT') THEN
        RAISE_APPLICATION_ERROR(-20002, 'Invalid action. Use APPROVE or REJECT.');
    END IF;

    UPDATE leave_requests 
    SET status = CASE WHEN UPPER(p_action) = 'APPROVE' THEN 'APPROVED' ELSE 'REJECTED' END, approved_by = p_manager_id, approved_on = SYSDATE WHERE request_id = p_request_id;

    DBMS_OUTPUT.PUT_LINE('Leave request ' || p_request_id || ' updated to status: ' || UPPER(p_action));

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No request found with the given ID.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error during approval: ' || SQLERRM);

END;
/
--Checking the procedures
SET SERVEROUTPUT ON;

EXECUTE request_leave(4, DATE '2025-06-05', DATE '2025-06-06', 'Medical');

select * from LEAVE_REQUESTS;

EXECUTE approve_leave(2, 99, 'APPROVE');

EXECUTE process_payroll(4, '2025-06');
SELECT * from payroll_history;

EXECUTE process_payroll(5, '2025-06');